#!/bin/bash

################################################################################
# Generally:
# * Each log output goes to stderrr, so that we can return value from functions
# with stdout. (Curl does the same).
################################################################################

program_name() {
  echo "SECRET-OPS"
}
log_debug() {
  if [ "${RELEASER_LOG_LEVEL}" == "debug" ]; then
    echo -e "$(date "+%d-%m-%Y %T") $(program_name) debug: ${1}" >&2
  fi
}
log_info() {
  echo -e "$(date "+%d-%m-%Y %T") $(program_name) info: ${1}" >&2
}
log_error() {
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(program_name) error: $1\e[0m" >&2
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(program_name) error: File: ${BASH_SOURCE[0]}\e[0m" >&2
  echo -e "\e[31m$(date "+%d-%m-%Y %T") $(program_name) error: Line numbers: ${BASH_LINENO[*]}\e[0m" >&2
}
log_warn() {
  echo -e "\e[33m$(date "+%d-%m-%Y %T") $(program_name) warn: $1\e[0m" >&2
}

export VAULT_ADDR="${VAULT_ADDR:-https://vault.ai-traders.com:8200}"

# Encrypts any string, uses GoCD server.
function encrypt_with_gocd {
  variable_to_encrypt=$1

  #FIXME: curl to go server is insecure because go uses self-signed certs
  # this token has privileges to issue ai-traders.com certificates
  my_gocd_pass=$(vault read -field=value secret/$USER/gocd)
  HTTP_RESPONSE=$(curl --silent --write-out "HTTPSTATUS:%{http_code}" \
    'https://go.ai-traders.com:8154/go/api/admin/encrypt' --insecure  \
    -u "${USER}:${my_gocd_pass}" \
    -H 'Accept: application/vnd.go.cd.v1+json' \
    -H 'Content-Type: application/json' \
    -X POST -d "{ \"value\" : \"${variable_to_encrypt}\" }")
  # extract the status
  HTTP_STATUS=$(echo $HTTP_RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
  if [ ! $HTTP_STATUS -eq 200  ]; then
    echo "Error encrypting token for gocd [HTTP status: $HTTP_STATUS]"
    exit 1
  fi
  HTTP_BODY=$(echo $HTTP_RESPONSE | sed -e 's/HTTPSTATUS\:.*//g')
  secured_value=$(echo $HTTP_BODY | jq '.encrypted_value')
}

# Encrypts Vault Token.
function generate_certs_token {
  vault_token=$(vault token create -policy=issue-ait-certs -field token)
  encrypt_with_gocd "${vault_token}"
  secured_token_gocd=${secured_value}
  echo "Generated token and secured for gocd"
}

function insert_vault_token_gocd_yaml {
  echo "Replacing pipeline config with with VAULT_TOKEN: ${secured_token_gocd}"
  find . -name '*.gocd.yaml' -exec sed -i -E "s#VAULT_TOKEN\:.*#VAULT_TOKEN: ${secured_token_gocd}#g" {} \;
}
